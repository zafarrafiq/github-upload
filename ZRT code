pragma solidity ^0.8.2;

contract token {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowances;
    uint public totalSupply = 10000 * 10 ** 18;
    string public name = "My Token";
    string public symbol = "ZRT";
    uint public decimals = 18;

    event Transfer(address indexed from, address indexed to, uint value);
    event approval(address indexed onwer, address indexed spender, uint value);
    constructor() {
        balances[msg.sender] = totalSupply;
    }
    
    function balancOf(address owner) public view returns(uint) {
    return balances [owner];
    
    }
    
    function transfer(address to, uint value) public returns (bool) {
        require(balancOf(msg.sender) >= value, 'balance to low');
        balances[to] += value;
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function transferfrom(address from, address to, uint value) public returns(bool) {
        
        balances[to] += value;
        balances[from] -= value; 
        emit Transfer(from, to, value);
        return true;
    }
    
    function approve(address spender, uint value) public returns(bool) {
       
        emit approval(msg.sender, spender, value);
        return true;
    }
}
